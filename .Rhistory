return(N)
}
# Run the simulation with function dlogistic.
temp.Dens    <- dlogistic()
Density <- data.frame(Time = t_range, PopDens = temp.Dens)
# Run the simulation with function dlogistic.demo.noise.
temp.Dens.noise    <- dlogistic.demo.noise()
Density.noise <- data.frame(Time = t_range, PopDens = temp.Dens)
})
output$figure1 <- renderPlot({
# ---------------
# Plotting growth curves
plot_Time.series <- ggplot(data = Density,
aes(x = Time, y = PopDens, colour = as.factor(PopRate))) +
scale_color_manual(values = col.pal) +
geom_line(alpha = 0.8) +
geom_point(size = 0.3,
alpha = 0.8) +
scale_y_continuous(labels = scales::percent) +
theme_bw() +
facet_grid(. ~ as.factor(PopRate)) +
# labs(x = "Time", y = "Population density") +
labs(x = "Population growth rate", y = "Population density relative to carrying capacity") +
theme(panel.spacing.x = unit(-0.00, "lines"),
legend.position="none",
# panel.grid.minor.x = element_blank(),
# panel.grid.major.x = element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
strip.background = element_blank())
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list=ls())
# Load libraries.
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
# shinyApp(
ui <- fluidPage(theme = shinytheme("simplex"),
titlePanel("Time-descrete logistic population growth"),
sidebarLayout(
sidebarPanel(
# textInput("txt", "Text input:", "text here"),
sliderInput("lambda", "Growth rate:",
min = 0,
max = 2,
value = 0.005),
sliderInput("K", "Carrying capacity:",
min = 1,
max = 100,
value = 10),
sliderInput("N_0", "Initial population density:",
min = 1,
max = 100,
value = 10),
sliderInput("t_stop", "Maximum simulation time:",
min = 1,
max = 500,
value = 100)
# sliderInput("z.val", "Stochasticity level:",
#             min = 0,
#             max = 1,
#             value = 0.005)
),
mainPanel(
plotOutput(outputId = "figure1")
)
server <- function(input, output) {
dataInput <- reactive({
# ------------------------------
# Colors
palette.1 <- rev(c("#FF3A21", "#FF2C8C", "#990CE8", "#0004FF", "#0C9BE8", "#72C258"))
palette.2 <- c("#3D010A", "#4B000C", "#61000F", "#930017", "#C7001F", "#C70000")
palette.3 <- c("#032EB0", "#159C00", "#899400", "#F2B800", "#F26700", "#C70000")
# palette.4 <- c("#", "#", "#", "#", "#", "#")
col.pal <- palette.3
# ------------------------------
# Variable model parameter values.
lambda <- input$lambda
K      <- input$K
N_0 <- input$N_0
t_stop <- input$t_stop
z.val <- input$z.val
# ------------------------------
# Fixed model parameter values.
N_0     <- 0.8
t_start <- 0     # starting time for simulation
t_stop   <- 70  # maximum simulated time
t_range <- seq(t_start, t_stop, 1)
parameters <- c(lambda, K, N_0, t_start, t_stop)
# ...for demographic stochasticity.
set.seed(1)
zeta <- rnorm(length(t_range), 0, p.val)
# ------------------------------
# Growth equations/functions.
# Without noise.
dlogistic <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K)
}
return(N)
}
# With demographic noise.
dlogistic.demo.noise <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K) + zeta[i]
}
return(N)
}
# Run the simulation with function dlogistic.
temp.Dens    <- dlogistic()
Density <- data.frame(Time = t_range, PopDens = temp.Dens)
# Run the simulation with function dlogistic.demo.noise.
temp.Dens.noise    <- dlogistic.demo.noise()
Density.noise <- data.frame(Time = t_range, PopDens = temp.Dens)
})
output$figure1 <- renderPlot({
# ---------------
# Plotting growth curves
plot_Time.series <- ggplot(data = dataInput,
aes(x = Time, y = PopDens, colour = as.factor(PopRate))) +
scale_color_manual(values = col.pal) +
geom_line(alpha = 0.8) +
geom_point(size = 0.3,
alpha = 0.8) +
scale_y_continuous(labels = scales::percent) +
theme_bw() +
facet_grid(. ~ as.factor(PopRate)) +
# labs(x = "Time", y = "Population density") +
labs(x = "Population growth rate", y = "Population density relative to carrying capacity") +
theme(panel.spacing.x = unit(-0.00, "lines"),
legend.position="none",
# panel.grid.minor.x = element_blank(),
# panel.grid.major.x = element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
strip.background = element_blank())
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list=ls())
# Load libraries.
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
# shinyApp(
ui <- fluidPage(theme = shinytheme("simplex"),
titlePanel("Time-descrete logistic population growth"),
sidebarLayout(
sidebarPanel(
# textInput("txt", "Text input:", "text here"),
sliderInput("lambda", "Growth rate:",
min = 0,
max = 2,
value = 0.005),
sliderInput("K", "Carrying capacity:",
min = 1,
max = 100,
value = 10),
sliderInput("N_0", "Initial population density:",
min = 1,
max = 100,
value = 10),
sliderInput("t_stop", "Maximum simulation time:",
min = 1,
max = 500,
value = 100)
# sliderInput("z.val", "Stochasticity level:",
#             min = 0,
#             max = 1,
#             value = 0.005)
),
mainPanel(
plotOutput(outputId = "figure1")
)
server <- function(input, output) {
dataInput <- reactive({
# ------------------------------
# Colors
palette.1 <- rev(c("#FF3A21", "#FF2C8C", "#990CE8", "#0004FF", "#0C9BE8", "#72C258"))
palette.2 <- c("#3D010A", "#4B000C", "#61000F", "#930017", "#C7001F", "#C70000")
palette.3 <- c("#032EB0", "#159C00", "#899400", "#F2B800", "#F26700", "#C70000")
# palette.4 <- c("#", "#", "#", "#", "#", "#")
col.pal <- palette.3
# ------------------------------
# Variable model parameter values.
lambda <- input$lambda
K      <- input$K
N_0 <- input$N_0
t_stop <- input$t_stop
z.val <- input$z.val
# ------------------------------
# Fixed model parameter values.
N_0     <- 0.8
t_start <- 0     # starting time for simulation
t_stop   <- 70  # maximum simulated time
t_range <- seq(t_start, t_stop, 1)
parameters <- c(lambda, K, N_0, t_start, t_stop)
# ...for demographic stochasticity.
set.seed(1)
zeta <- rnorm(length(t_range), 0, p.val)
# ------------------------------
# Growth equations/functions.
# Without noise.
dlogistic <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K)
}
return(N)
}
# With demographic noise.
dlogistic.demo.noise <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K) + zeta[i]
}
return(N)
}
# Run the simulation with function dlogistic.
temp.Dens    <- dlogistic()
Density <- data.frame(Time = t_range, PopDens = temp.Dens)
# Run the simulation with function dlogistic.demo.noise.
temp.Dens.noise    <- dlogistic.demo.noise()
Density.noise <- data.frame(Time = t_range, PopDens = temp.Dens)
list(Density = Density)
})
output$figure1 <- renderPlot({
# ---------------
# Plotting growth curves
plot_Time.series <- ggplot(data = dataInput[[Density]],
aes(x = Time, y = PopDens, colour = as.factor(PopRate))) +
scale_color_manual(values = col.pal) +
geom_line(alpha = 0.8) +
geom_point(size = 0.3,
alpha = 0.8) +
scale_y_continuous(labels = scales::percent) +
theme_bw() +
facet_grid(. ~ as.factor(PopRate)) +
# labs(x = "Time", y = "Population density") +
labs(x = "Population growth rate", y = "Population density relative to carrying capacity") +
theme(panel.spacing.x = unit(-0.00, "lines"),
legend.position="none",
# panel.grid.minor.x = element_blank(),
# panel.grid.major.x = element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
strip.background = element_blank())
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list=ls())
# Load libraries.
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
# shinyApp(
ui <- fluidPage(theme = shinytheme("simplex"),
titlePanel("Time-descrete logistic population growth"),
sidebarLayout(
sidebarPanel(
# textInput("txt", "Text input:", "text here"),
sliderInput("lambda", "Growth rate:",
min = 0,
max = 2,
value = 0.005),
sliderInput("K", "Carrying capacity:",
min = 1,
max = 100,
value = 10),
sliderInput("N_0", "Initial population density:",
min = 1,
max = 100,
value = 10),
sliderInput("t_stop", "Maximum simulation time:",
min = 1,
max = 500,
value = 100)
# sliderInput("z.val", "Stochasticity level:",
#             min = 0,
#             max = 1,
#             value = 0.005)
),
mainPanel(
plotOutput(outputId = "figure1")
)
server <- function(input, output) {
dataInput <- reactive({
# ------------------------------
# Colors
palette.1 <- rev(c("#FF3A21", "#FF2C8C", "#990CE8", "#0004FF", "#0C9BE8", "#72C258"))
palette.2 <- c("#3D010A", "#4B000C", "#61000F", "#930017", "#C7001F", "#C70000")
palette.3 <- c("#032EB0", "#159C00", "#899400", "#F2B800", "#F26700", "#C70000")
# palette.4 <- c("#", "#", "#", "#", "#", "#")
col.pal <- palette.3
# ------------------------------
# Variable model parameter values.
lambda <- input$lambda
K      <- input$K
N_0 <- input$N_0
t_stop <- input$t_stop
z.val <- input$z.val
# ------------------------------
# Fixed model parameter values.
N_0     <- 0.8
t_start <- 0     # starting time for simulation
t_stop   <- 70  # maximum simulated time
t_range <- seq(t_start, t_stop, 1)
parameters <- c(lambda, K, N_0, t_start, t_stop)
# ...for demographic stochasticity.
set.seed(1)
zeta <- rnorm(length(t_range), 0, p.val)
# ------------------------------
# Growth equations/functions.
# Without noise.
dlogistic <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K)
}
return(N)
}
# With demographic noise.
dlogistic.demo.noise <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K) + zeta[i]
}
return(N)
}
# Run the simulation with function dlogistic.
temp.Dens    <- dlogistic()
Density <- data.frame(Time = t_range, PopDens = temp.Dens)
# Run the simulation with function dlogistic.demo.noise.
temp.Dens.noise    <- dlogistic.demo.noise()
Density.noise <- data.frame(Time = t_range, PopDens = temp.Dens)
list(Density = Density, Density.noise = Density.noise)
})
output$figure1 <- renderPlot({
# ---------------
# Plotting growth curves
plot_Time.series <- ggplot(data = dataInput[[Density]],
aes(x = Time, y = PopDens, colour = as.factor(PopRate))) +
scale_color_manual(values = col.pal) +
geom_line(alpha = 0.8) +
geom_point(size = 0.3,
alpha = 0.8) +
scale_y_continuous(labels = scales::percent) +
theme_bw() +
facet_grid(. ~ as.factor(PopRate)) +
# labs(x = "Time", y = "Population density") +
labs(x = "Population growth rate", y = "Population density relative to carrying capacity") +
theme(panel.spacing.x = unit(-0.00, "lines"),
legend.position="none",
# panel.grid.minor.x = element_blank(),
# panel.grid.major.x = element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
strip.background = element_blank())
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/LogGrowth')
temp.Dens.noise <- dlogistic.demo.noise()
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/LogGrowth')
r <- data.frame(b = c(1,2,3,4,5), c = c(5,6,7,8,9))
e <- data.frame(k = c(19,2,3,4,5), l = c(10,6,7,8,9))
r
e
list(r,e)
j <- list(r,e)
j[[1]]
j[[r]]
j[["r"]]
j <- list(r=r,e=e)
j[["r"]]
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/LogGrowth')
source('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Logistic growth/LogGrowth.R', echo=TRUE)
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/LogGrowth')
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/Test')
r <- data.frame(b = c(1,2,3,4,5), c = c(5,6,7,8,9))
e <- data.frame(k = c(19,2,3,4,5), l = c(10,6,7,8,9))
j <- list(r=r,e=e)
j
j$e
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/LogGrowth')
rm(list=ls())
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
ui <- fluidPage(theme = shinytheme("simplex"),
titlePanel("Time-descrete logistic population growth"),
sidebarLayout(
sidebarPanel(
# textInput("txt", "Text input:", "text here"),
sliderInput("lambda", "Growth rate:",
min = 0,
max = 4,
value = 1,
step = 0.01),
sliderInput("K", "Carrying capacity:",
min = 0,
max = 100,
value = 50,
step = 1),
sliderInput("N_0", "Initial population density:",
min = 0,
max = 100,
value = 1,
step = 0.1),
sliderInput("t_stop", "Maximum simulation time:",
min = 1,
max = 500,
value = 200)
# sliderInput("z.val", "Stochasticity level:",
#             min = 0,
#             max = 1,
#             value = 0.005)
),
mainPanel(
plotOutput(outputId = "figure1")
)
server <- function(input, output) {
dataInput <- reactive({
# ------------------------------
# Colors
palette.1 <- rev(c("#FF3A21", "#FF2C8C", "#990CE8", "#0004FF", "#0C9BE8", "#72C258"))
palette.2 <- c("#3D010A", "#4B000C", "#61000F", "#930017", "#C7001F", "#C70000")
palette.3 <- c("#032EB0", "#159C00", "#899400", "#F2B800", "#F26700", "#C70000")
# palette.4 <- c("#", "#", "#", "#", "#", "#")
col.pal <- palette.3
# ------------------------------
# Variable model parameter values.
lambda <- input$lambda
K      <- input$K
N_0 <- input$N_0
t_stop <- input$t_stop
z.val <- input$z.val
# ------------------------------
# Fixed model parameter values.
N_0     <- 0.8
t_start <- 0     # starting time for simulation
t_stop   <- 70  # maximum simulated time
t_range <- seq(t_start, t_stop, 1)
parameters <- c(lambda, K, N_0, t_start, t_stop)
# ...for demographic stochasticity.
set.seed(1)
zeta <- rnorm(length(t_range), 0, z.val)
parameters.noise <- c(lambda, K, N_0, t_start, t_stop, zeta)
# ------------------------------
# Growth equations/functions.
# Without noise.
dlogistic <- function(parameters) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K)
}
return(N)
}
# With demographic noise.
dlogistic.demo.noise <- function(parameters.noise) {
N <- c(N_0, numeric(t_stop))
for (i in 1:t_stop) N[i + 1] <- {
N[i] + lambda * N[i] * (1 - N[i] / K) + zeta[i]
}
return(N)
}
# Run the simulation with function dlogistic.
temp.Dens <- dlogistic()
Density   <- data.frame(Time = t_range, PopDens = temp.Dens)
# Run the simulation with function dlogistic.demo.noise.
temp.Dens.noise <- dlogistic.demo.noise()
Density.noise   <- data.frame(Time = t_range, PopDens = temp.Dens.noise)
# list(Density = Density)
list(Density = Density, Density.noise = Density.noise)
})
output$figure1 <- renderPlot({
# ---------------
# Plotting growth curves
plot_Time.series <- ggplot(data = dataInput()[["Density"]],
aes(x = Time, y = PopDens, colour = as.factor(PopRate))) +
scale_color_manual(values = col.pal) +
geom_line(alpha = 0.8) +
geom_point(size = 0.3,
alpha = 0.8) +
scale_y_continuous(labels = scales::percent) +
theme_bw() +
facet_grid(. ~ as.factor(PopRate)) +
# labs(x = "Time", y = "Population density") +
labs(x = "Population growth rate", y = "Population density relative to carrying capacity") +
theme(panel.spacing.x = unit(-0.00, "lines"),
legend.position="none",
# panel.grid.minor.x = element_blank(),
# panel.grid.major.x = element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
strip.background = element_blank())
})
}
View(server)
runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Shiny Test/LogGrowth')
